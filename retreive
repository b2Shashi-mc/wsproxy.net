<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta content="SMFC,sfmc, SOAP API,text/html; charset=UTF-8" http-equiv="Content-Type" name="sfmc">
    <meta name="author" content="Sasee Prasad. SFMC Technical Architect, Author @AMPScriptify">
    <title>SOAP API Object</title>

    <!-- Include Prism.js for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>

    <!-- Include Font Awesome for the clipboard icon -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Google Fonts -->
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Source+Code+Pro:wght@400;600&display=swap"
        rel="stylesheet">

        <style>
            /* Global Reset */
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
        
            body {
                font-family: 'Roboto', sans-serif;
                background: linear-gradient(135deg, #4f5b62, #2f3e46); /* A deeper gradient for better contrast */
                color: #f1f1f1;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                padding: 20px;
            }
        
            .container {
                display: flex;
                flex-direction: column;
                max-width: 1200px;
                width: 100%;
                background-color: #1d2328; /* Dark background for better contrast */
                border-radius: 12px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                overflow: hidden;
                transition: transform 0.3s ease;
            }
        
            /* Header */
            header {
                background: linear-gradient(135deg, #005f73, #0a9396); /* More vibrant gradient */
                color: #f1f1f1;
                text-align: left;
                padding: 10px 0;
                font-size: 1.2rem;
                font-weight: 200;
                letter-spacing: 1px;
            }
        
            /* SOAP API List */
            .soap-api-list {
                padding: 30px 40px;
                display: flex;
                flex-direction: column;
                gap: 20px;
                overflow-y: auto;
            }
        
            .soap-api-list h2 {
                font-size: 1.8rem;
                font-weight: 600;
                color: #b8e0d2; /* Softer text color */
                margin-bottom: 15px;
            }
        
            .api-option {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 14px 18px;
                border-radius: 8px;
                cursor: pointer;
                background-color: #2d3c42;
                transition: background-color 0.3s ease, box-shadow 0.3s ease;
                font-size: 1.1rem;
                color: #b8e0d2;
            }
        
            .api-option:hover {
                background-color: #4b6571; /* Darker hover background */
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            }
        
            .soap-api-list input {
                transform: scale(1.4);
            }
        
            .soap-api-list input:checked + label {
                font-weight: bold;
                color: #ffb900; /* Accent color when selected */
            }
        
            .soap-api-list label {
                cursor: pointer;
            }
        
            /* Code Editor */
            .code-editor-container {
                width: 100%;
                padding: 20px 40px;
                background-color: #222f36; /* Darker background for code area */
                display: none;
                border-top: 1px solid #444;
                position: relative;
            }
        
            .code-editor-container h2 {
                font-size: 1.8rem;
                color: #ffb900; /* Gold color for heading */
                margin-bottom: 20px;
                font-weight: 600;
            }
        
            .copy-btn {
                background-color: #008080; /* More vibrant teal */
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                cursor: pointer;
                font-size: 1.1rem;
                transition: background-color 0.3s ease, box-shadow 0.3s ease;
                position: absolute;
                top: 20px;
                right: 20px;
                box-shadow: 0 6px 14px rgba(0, 0, 0, 0.15);
            }
        
            .copy-btn:hover {
                background-color: #ffb900;
                color: #003c71;
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            }
        
            .copy-btn i {
                margin-right: 8px;
            }
        
            pre {
                max-height: 500px;
                overflow-y: auto;
                padding: 20px;
                background-color: #2d2d2d;
                border-radius: 10px;
                border: 1px solid #444;
                font-size: 1rem;
                font-family: 'Source Code Pro', monospace;
                color: #f8f8f2;
            }
        
            pre::-webkit-scrollbar {
                width: 10px;
            }
        
            pre::-webkit-scrollbar-thumb {
                background: #ffb900;
                border-radius: 5px;
            }
        
            pre::-webkit-scrollbar-track {
                background: #444;
            }
        
            /* Responsive Design */
            @media (min-width: 768px) {
                .container {
                    flex-direction: row;
                    height: 700px;
                    padding: 40px;
                }
        
                .soap-api-list {
                    width: 30%;
                    border-right: 1px solid #444;
                }
        
                .code-editor-container {
                    width: 70%;
                }

                /* Style for the Home Page Link */
        .home-page-btn {
            display: inline-block;
            padding: 12px 24px;
            background-color: #005f73;
            color: #fff;
            text-decoration: none;
            font-size: 1.2rem;
            border-radius: 8px;
            text-align: center;
            transition: background-color 0.3s ease, transform 0.3s ease;
            margin-bottom: 20px;
        }

        .home-page-btn:hover {
            background-color: #0a9396;
            transform: scale(1.05);
        }

            }
        </style>
</head>

<body>
    <div class="container">
        
        <!-- Left Section: SOAP API Object List -->
        <div class="soap-api-list">
            <a class="home-page-btn" href="https://b2shashi.blogspot.com/" role="button">Home Page</a>
            <h2>SOAP API Object</h2>
            <div class="api-option">
                <input type="radio" name="soapApi" value="Account" onchange="onApiSelect('Account')" id="apiAccount">
                <label for="apiAccount">Account</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="AccountUser" onchange="onApiSelect('AccountUser')"
                    id="apiAccountUser">
                <label for="apiAccountUser">AccountUser</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="BounceEvent" onchange="onApiSelect('BounceEvent')"
                    id="apiBounceEvent">
                <label for="apiBounceEvent">BounceEvent</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="ClickEvent" onchange="onApiSelect('ClickEvent')"
                    id="apiClickEvent">
                <label for="apiClickEvent">ClickEvent</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="DataExtension" onchange="onApiSelect('DataExtension')"
                    id="apiDataExtension">
                <label for="apiDataExtension">DataExtension</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="NotSentEvent" onchange="onApiSelect('NotSentEvent')"
                    id="apiNotSentEvent">
                <label for="apiNotSentEvent">NotSentEvent</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="OpenEvent" onchange="onApiSelect('OpenEvent')"
                    id="apiOpenEvent">
                <label for="apiOpenEvent">OpenEvent</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="QueryDefinition" onchange="onApiSelect('QueryDefinition')"
                    id="apiQueryDefinition">
                <label for="apiQueryDefinition">QueryDefinition</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="SendSummary" onchange="onApiSelect('SendSummary')"
                    id="apiSendSummary">
                <label for="apiSendSummary">SendSummary</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="SentEvent" onchange="onApiSelect('SentEvent')"
                    id="apiSentEvent">
                <label for="apiSentEvent">SentEvent</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="Subscriber" onchange="onApiSelect('Subscriber')"
                    id="apiSubscriber">
                <label for="apiSubscriber">Subscriber</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="TriggeredSendSummary"
                    onchange="onApiSelect('TriggeredSendSummary')" id="apiTriggeredSendSummary">
                <label for="apiTriggeredSendSummary">TriggeredSendSummary</label>
            </div>
            <div class="api-option">
                <input type="radio" name="soapApi" value="UnsubEvent" onchange="onApiSelect('UnsubEvent')"
                    id="apiUnsubEvent">
                <label for="apiUnsubEvent">UnsubEvent</label>
            </div>
        </div>


        <!-- Right Section: Code Editor -->
        <div class="code-editor-container" id="code-editor-container">
            <h2>WS-Proxy Code</h2>
            <button class="copy-btn" onclick="copyToClipboard()">
                <i class="fas fa-copy"></i>Copy Code
            </button>
            <pre><code id="code-editor" class="language-javascript"></code></pre>
        </div>
    </div>
    
    <script>
        const ssjsTemplate = `
&lt;script runat&#x3D;&quot;server&quot;&gt;
Platform.Load(&quot;core&quot;, &quot;1&quot;);
try {
  &#x2F;&#x2F; Set the name of the SOAP object to &quot;{{SOAPAPIName}}&quot;.
  var soapObject &#x3D; {{SOAPAPIName}};

  &#x2F;&#x2F; Call the function &#39;DescribeSoapObject&#39; to retrieve the metadata information for the SOAP object.
  var soapMetaData &#x3D; DescribeSoapObject(soapObject);

  &#x2F;&#x2F; Fetch the properties of the SOAP object that are available for retrieval.
  var properties &#x3D; FetchRetrieveableProperties(soapMetaData);


  &#x2F;&#x2F; Call the function &#39;RetrieveSoapObject&#39; to retrieve data from the SOAP object using the specified filter and columns.
  var response &#x3D; RetrieveSoapObject(soapObject, cols);

  &#x2F;&#x2F; Convert the response object to a string representation and write it to the output.
  Write(Stringify(response));
} catch (ex) {
  &#x2F;&#x2F; If an exception occurs during the execution, catch it and write the error messages to the output.
  Write(ex.message);
  Write(ex.description);
  Write(ex.jintException);
}

&#x2F;&#x2F; Function to describe a SOAP object using WSProxy.
&#x2F;&#x2F; Parameters:
&#x2F;&#x2F; - soapObjectname: The name of the SOAP object to describe.
function DescribeSoapObject(soapObjectname) {
  &#x2F;&#x2F; Create a new instance of WSProxy to interact with the SOAP API.
  var api &#x3D; new Script.Util.WSProxy();

  &#x2F;&#x2F; Call the describe method of WSProxy to fetch the metadata information for the SOAP object.
  var response &#x3D; api.describe(soapObjectname);

  &#x2F;&#x2F; Return the response, which contains the metadata information for the SOAP object.
  return response;
}

&#x2F;&#x2F; Function to fetch an array of retrieveable property names from SOAP metadata.
&#x2F;&#x2F; Parameters:
&#x2F;&#x2F; - soapMetaData: An array of objects containing metadata information for SOAP properties.
function FetchRetrieveableProperties(soapMetaData) {
  &#x2F;&#x2F; Create an empty array to store the names of retrieveable properties.
  var propertiesName &#x3D; [];

  &#x2F;&#x2F; Iterate through each object in the soapMetaData array.
  for (var i in soapMetaData) {
    &#x2F;&#x2F; Extract the &#39;Name&#x27; property from the current object and store it in the propertiesName array.
    var name &#x3D; soapMetaData[i].Name;
    var isRetrievable &#x3D; soapMetaData[i].IsRetrievable;
    if (isRetrievable &#x3D;&#x3D;&#x3D; true) {
      propertiesName.push(name);
    }
  }

  &#x2F;&#x2F; Return the array containing the names of retrieveable properties.
  return propertiesName;
}

&#x2F;&#x2F; Function to create a filter object for data retrieval or processing.
&#x2F;&#x2F; Parameters:
&#x2F;&#x2F; - prop: The property name to filter on.
&#x2F;&#x2F; - operator: The operator used for filtering (e.g., equals, greater than, less than, etc.).
&#x2F;&#x2F; - value: The value to compare the property against.
function ApplyFilter(prop, operator, value) {
  &#x2F;&#x2F; Create and return a filter object with the specified properties.
  return {
    Property: prop,         &#x2F;&#x2F; The property name on which the filter is applied.
    SimpleOperator: operator, &#x2F;&#x2F; The operator used for the filter (e.g., &#x27;equals&#x27;, &#x27;greaterThan&#x27;, etc.).
    Value: value            &#x2F;&#x2F; The value to compare the property against.
  };
}

&#x2F;&#x2F; Function to retrieve data from a SOAP object using WSProxy.
&#x2F;&#x2F; Parameters:
&#x2F;&#x2F; - soapObjectname: The name of the SOAP object from which data will be retrieved.
&#x2F;&#x2F; - cols: An array of column names to retrieve from the SOAP object.
&#x2F;&#x2F; - filter: A filter to apply when querying the SOAP object (optional).
function RetrieveSoapObject(soapObjectname, cols) {
  &#x2F;&#x2F; Create a new instance of WSProxy to interact with the SOAP object.
  var api &#x3D; new Script.Util.WSProxy();
  
  &#x2F;&#x2F; Call the retrieve method of WSProxy to fetch data from the SOAP object.
  var response &#x3D; api.retrieve(soapObjectname, cols);

  &#x2F;&#x2F; Return the response, which contains the retrieved data from the SOAP object.
  return response;
}
&lt;&#x2F;script&gt;
`;

        function onApiSelect(apiName) {
            document.getElementById('code-editor-container').style.display = 'block';
            let codeWithAPIName = ssjsTemplate.replace(/{{SOAPAPIName}}/g, `"${apiName}"`);
            document.getElementById('code-editor').textContent = decodeHTML(codeWithAPIName);
            Prism.highlightAll();
            // Use a small delay to ensure rendering completes before resetting scroll
            setTimeout(function () {
                const codeEditorPre = document.querySelector('#code-editor-container pre');
                codeEditorPre.scrollTop = 0; // Reset scroll position to the top
            }, 0);
        }

        function decodeHTML(html) {
            const txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }

        function copyToClipboard() {
            const codeText = document.getElementById("code-editor").textContent;
            navigator.clipboard.writeText(codeText)
                .then(() => alert("Code copied to clipboard!"))
                .catch(err => console.error("Error copying code: ", err));
        }
    </script>

</body>

</html>
